apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "com.cyberwalkabout.cyberfit"  // some day soon com.warriorfitapp
        minSdkVersion 16 // We will only support Android 4.1, Jelly Bean, API 16 and up
        targetSdkVersion 23
        versionCode 24
        versionName "24"

        multiDexEnabled = true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }

    signingConfigs {
        release {
            storeFile android.signingConfigs.debug.storeFile
            storePassword android.signingConfigs.debug.storePassword
            keyAlias android.signingConfigs.debug.keyAlias
            keyPassword android.signingConfigs.debug.keyPassword
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
}

dependencies {

    compile project(':modules:ICSNumberPicker')
    compile project(':modules:ViewPagerIndicator')
    compile project(':dbshared')

    // TODO: need to update the Facebook login and sharing
    compile 'com.facebook.android:facebook-android-sdk:4.+' //4.6.0

    // Play Services are used to communicate with Wear
    compile 'com.google.android.gms:play-services-wearable:+'
    compile 'com.google.android.gms:play-services-base:+'
    compile 'com.google.android.gms:play-services-plus:+'
    compile 'com.google.android.gms:play-services-location:+'
    compile 'com.google.android.gms:play-services-maps:+'

    compile 'com.android.support:support-v4:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:design:23.0.1'

    // http://developer.android.com/tools/building/multidex.html
    compile 'com.android.support:multidex:1.0.1'

    // Flurry checked by Uki: as of May 23, 2016
    compile 'com.flurry.android:analytics:+' // 6.3.1

    // Log
    compile 'org.slf4j:slf4j-android:+' // 1.7.21

    compile 'com.avast:android-styled-dialogs:2.2.0'

    compile 'com.google.code.gson:gson:2.3'

    compile 'joda-time:joda-time:2.3'

    compile 'com.nineoldandroids:library:2.4.0'
    compile 'se.emilsjolander:stickylistheaders:2.4.1'

    compile 'com.github.bumptech.glide:glide:3.6.0'

    compile files('libs/YouTubeAndroidPlayerApi.jar')

    // not sure I want to maintain that
    compile files('libs/bugsense-3.6.jar')

    // utils
    compile 'com.google.guava:guava:18.0'

    androidTestCompile('com.android.support:multidex-instrumentation:1.0.1') {
        exclude group: 'com.android.support', module: 'multidex'
    }

    compile "org.parceler:parceler-api:1.0.1"
    provided "org.parceler:parceler:1.0.1"

    compile 'de.hdodenhof:circleimageview:1.3.0'
    compile 'com.vlonjatg.android:app-tour:1.0'


}

task initReleaseConfig << {

    def propertiesFile = "cyberfit_prod.properties"

    if (project.hasProperty("configFile")) {
        propertiesFile = configFile
    }

    Properties props = new Properties()
    props.load(new FileInputStream(file(propertiesFile)))

    if (props.containsKey("storeFile") && props.storeFile?.trim()) {
        android.signingConfigs.release.storeFile = file(props.storeFile)
    } else if (System.console() != null) {
        android.signingConfigs.release.storeFile = file(System.console().readLine("\n\$ Enter keystore path: "))
    }

    if (props.containsKey("storePassword") && props.storePassword?.trim()) {
        android.signingConfigs.release.storePassword = props.storePassword
    } else if (System.console() != null) {
        android.signingConfigs.release.storePassword = new String(System.console().readPassword("\n\$ Enter keystore password: "))
    }

    if (props.containsKey("keyAlias") && props.keyAlias?.trim()) {
        android.signingConfigs.release.keyAlias = props.keyAlias
    } else if (System.console() != null) {
        android.signingConfigs.release.keyAlias = System.console().readLine("\n\$ Enter key alias: ")
    }

    if (props.containsKey("keyPassword") && props.keyPassword?.trim()) {
        android.signingConfigs.release.keyPassword = props.keyPassword
    } else if (System.console() != null) {
        android.signingConfigs.release.keyPassword = new String(System.console().readPassword("\n\$ Enter key password: "))
    }
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "initReleaseConfig"
    }
}


